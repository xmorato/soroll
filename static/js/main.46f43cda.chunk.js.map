{"version":3,"sources":["components/Select.js","components/Mapa.js","components/UseGetData.js","components/UseTransformFinalData.js","components/UseFetchData.js","App.js","serviceWorker.js","index.js"],"names":["Label","styled","InputWrapper","Tag","label","onDelete","props","onClick","Listbox","CategoriesSelect","setSelected","useAutocomplete","id","defaultValue","multiple","options","incidences","getOptionSelected","option","value","title","getOptionLabel","getRootProps","getInputLabelProps","getInputProps","getTagProps","getListboxProps","getOptionProps","groupedOptions","focused","setAnchorEl","useEffect","NoSsr","ref","className","map","index","length","fontSize","Mapa","estilsMapa","mapContainer","useRef","mapboxgl","accessToken","Map","container","current","style","center","zoom","on","dades","dada","coord","forEach","coordenada","Marker","setLngLat","addTo","initializeMap","el","width","height","position","UseGetData","selected","dadesFromGoogle","finalData","elem","split","_lat","_lon","_carrer","_tipus","lat","lon","parseFloat","tipus","trimLeft","carrer","incidencies","filter","local","some","tipusIncidencies","data","push","Set","sort","_incidencesType","UseTransformFinalData","useState","setDadesFromGoogle","fetch","process","REACT_APP_GOOGLE_SHEETS_DOC_ID","then","res","json","content","$t","firstExtract","feed","entry","catch","e","console","log","UseFetchData","App","Box","display","Typography","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.46f43cda.chunk.js","sourcesContent":["/* eslint-disable no-use-before-define */\nimport React, {useEffect} from 'react';\nimport useAutocomplete from '@material-ui/lab/useAutocomplete';\nimport NoSsr from '@material-ui/core/NoSsr';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport styled from 'styled-components';\n\nconst Label = styled('label')`\n  padding: 0 0 4px;\n  line-height: 1.5;\n  display: block;\n`;\n\nconst InputWrapper = styled('div')`\n  width: 300px;\n  border: 1px solid #d9d9d9;\n  background-color: #fff;\n  border-radius: 4px;\n  padding: 1px;\n  display: flex;\n  flex-wrap: wrap;\n\n  &:hover {\n    border-color: #40a9ff;\n  }\n\n  &.focused {\n    border-color: #40a9ff;\n    box-shadow: 0 0 0 2px rgba(24, 144, 255, 0.2);\n  }\n\n  & input {\n    font-size: 14px;\n    height: 30px;\n    box-sizing: border-box;\n    padding: 4px 6px;\n    width: 0;\n    min-width: 30px;\n    flex-grow: 1;\n    border: 0;\n    margin: 0;\n    outline: 0;\n  }\n`;\n\nconst Tag = styled(({ label, onDelete, ...props }) => (\n    <div {...props}>\n        <span>{label}</span>\n        <CloseIcon onClick={onDelete} />\n    </div>\n))`\n  display: flex;\n  align-items: center;\n  height: 24px;\n  margin: 2px;\n  line-height: 22px;\n  background-color: #fafafa;\n  border: 1px solid #e8e8e8;\n  border-radius: 2px;\n  box-sizing: content-box;\n  padding: 0 4px 0 10px;\n  outline: 0;\n  overflow: hidden;\n\n  &:focus {\n    border-color: #40a9ff;\n    background-color: #e6f7ff;\n  }\n\n  & span {\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n  }\n\n  & svg {\n    font-size: 12px;\n    cursor: pointer;\n    padding: 4px;\n  }\n`;\n\nconst Listbox = styled('ul')`\n  width: 300px;\n  margin: 2px 0 0;\n  padding: 0;\n  position: absolute;\n  list-style: none;\n  background-color: #fff;\n  overflow: auto;\n  max-height: 250px;\n  border-radius: 4px;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n  z-index: 1;\n\n  & li {\n    padding: 5px 12px;\n    display: flex;\n\n    & span {\n      flex-grow: 1;\n    }\n\n    & svg {\n      color: transparent;\n    }\n  }\n\n  & li[aria-selected='true'] {\n    background-color: #fafafa;\n    font-weight: 600;\n\n    & svg {\n      color: #1890ff;\n    }\n  }\n\n  & li[data-focus='true'] {\n    background-color: #e6f7ff;\n    cursor: pointer;\n\n    & svg {\n      color: #000;\n    }\n  }\n`;\n\nexport default function CategoriesSelect(props) {\n\n    const {setSelected} = props;\n    const {\n        getRootProps,\n        getInputLabelProps,\n        getInputProps,\n        getTagProps,\n        getListboxProps,\n        getOptionProps,\n        groupedOptions,\n        value,\n        focused,\n        setAnchorEl,\n    } = useAutocomplete({\n        id: 'customized-hook-demo',\n        defaultValue: [],\n        multiple: true,\n        options: props.incidences,\n        getOptionSelected: (option, value) => {\n            return (option.title === value.title)\n        },\n        getOptionLabel: (option) => option.title\n    });\n\n    useEffect(()=> {\n        setSelected(value)\n    },[value, setSelected])\n\n\n    return (\n        <NoSsr>\n            <div>\n                <div {...getRootProps()}>\n                    <Label {...getInputLabelProps()}>{props.label}</Label>\n                    <InputWrapper ref={setAnchorEl} className={focused ? 'focused' : ''}>\n                        {value.map((option, index) => (\n                            <Tag label={option.title} {...getTagProps({ index })} />\n                        ))}\n\n                        <input {...getInputProps()} />\n                    </InputWrapper>\n                </div>\n                {groupedOptions.length > 0 ? (\n                    <Listbox {...getListboxProps()}>\n                        {groupedOptions.map((option, index) => (\n                            <li {...getOptionProps({ option, index })}>\n                                <span>{option.title}</span>\n                                <CheckIcon fontSize=\"small\" />\n                            </li>\n                        ))}\n                    </Listbox>\n                ) : null}\n            </div>\n        </NoSsr>\n    );\n}\n\n","import React, {useEffect, useRef} from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nconst Mapa = (props) => {\n\n//    console.log('PROPS: ', props);\n    const estilsMapa = {\n        dark: 'mapbox://styles/mapbox/dark-v10',\n        natural: 'mapbox://styles/mapbox/navigation-guidance-day-v4',\n        light: 'mapbox://styles/mapbox/light-v10',\n        outdoors: 'mapbox://styles/mapbox/outdoors-v11',\n        satellit: 'mapbox://styles/mapbox/satellite-v9'\n    };\n\n    const styles = {\n        width: \"100vh\",\n        height: \"100vh\",\n        position: \"\"\n    };\n\n    const mapContainer = useRef(null);\n\n    useEffect(() => {\n        mapboxgl.accessToken =\n            'pk.eyJ1IjoieGF2aW90cCIsImEiOiJja2F5Mnlnd3EwYzF1MzR1bG56czNnNnY4In0.LzCEft2g_0N9kuHVBgi8cA';\n        const initializeMap = ({mapContainer}) => {\n            const map = new mapboxgl.Map({\n                container: mapContainer.current,\n                style: estilsMapa.outdoors, // stylesheet location\n                center: [1.975731, 41.266965],\n                zoom: 15\n            });\n\n            map.on(\"load\", () => {\n                const coords = props.dades.map((dada) => {\n                    return (dada.coord)\n                });\n                coords.forEach((coordenada) => {\n                    new mapboxgl.Marker().setLngLat(coordenada).addTo(map)\n                });\n            });\n        };\n\n        initializeMap({mapContainer});\n    });\n\n    return <div ref={el => (mapContainer.current = el)} style={styles}/>;\n}\n\nexport default Mapa;","import {UseFetchData} from \"./UseFetchData\";\nimport {UseTransformFinalData} from \"./UseTransformFinalData\";\n\nconst UseGetData = (selected) => {\n\n    const {dadesFromGoogle} = UseFetchData();\n    const {tipusIncidencies, incidencies} = UseTransformFinalData(dadesFromGoogle, selected);\n    return {tipusIncidencies, incidencies}\n}\n\nexport default UseGetData;","export const UseTransformFinalData = (dadesFromGoogle, selected) => {\n\n    const extractDataFromSheet = dadesFromGoogle.map((elem) => {\n        return (elem.split(','));\n    });\n\n    const finalData = extractDataFromSheet.map((elem) => {\n        const _LAT = 2, _LON = 3, _CARRER = 5, _TIPUS = 6;\n        let coordenada = {coord: {lat: 0, lon: 0}};\n        const _lat = elem[_LAT].split(\":\");\n        const _lon = elem[_LON].split(\":\");\n        const _carrer = elem[_CARRER].split(\":\");\n        const _tipus = elem[_TIPUS].split(\":\");\n        let final = {\n            ...coordenada, coord: {\n                lat: parseFloat(_lat[1]), lon: parseFloat(_lon[1])\n            },\n            tipus: _tipus[1].trimLeft(),\n            carrer: _carrer[1]\n        };\n        return (final)\n    });\n\n\n    const _incidencesType = (data) => {\n        if (data) {\n            const _tipus = [];\n            data.forEach((elem) => {\n                _tipus.push(elem.tipus)\n            });\n            return ([...new Set(_tipus)].map((elem) => ({title: elem})).sort());\n        } else {\n            return ([]);\n        }\n    };\n\n    const incidencies = finalData.filter(\n        (local) => {\n            return selected.some((elem) => elem.title === local.tipus)\n        });\n\n    const tipusIncidencies = _incidencesType(finalData);\n\n    return {tipusIncidencies, incidencies}\n}\n\n","import {useEffect, useState} from 'react'\n\nexport const UseFetchData = () => {\n\n    const [dadesFromGoogle, setDadesFromGoogle] = useState([]);\n\n    const firstExtract = (data) => data.map((elem) => elem.content.$t);\n\n\n    useEffect(() => {\n            fetch(`https://spreadsheets.google.com/feeds/list/${process.env.REACT_APP_GOOGLE_SHEETS_DOC_ID}/od6/public/basic?alt=json`)\n                .then(res => res.json())\n                .then((data) => {\n                        //           console.log(\"DATA ABANS:\", data.feed.entry);\n                        setDadesFromGoogle(firstExtract(data.feed.entry));\n                    }\n                ).catch(e => console.log(\"error al fetch\", e))\n        }\n        , []);\n\n    return {dadesFromGoogle}\n}\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport CategoriesSelect from \"./components/Select\";\nimport Mapa from \"./components/Mapa\";\nimport UseGetData from \"./components/UseGetData\";\nimport {Box, Typography} from '@material-ui/core'\n\n\nfunction App() {\n\n    const [selected, setSelected] = useState([]);\n    const {tipusIncidencies, incidencies} = UseGetData(selected);\n\n    return (\n        <div className=\"App\">\n            <Box display={\"flex\"}\n                 style={{\"flexDirection\": \"column\", \"alignItems\": \"flex-start\", \"width\": \"-webkit-fill-available\"}}>\n                <Box display={\"flex\"} style={{\"width\": \"-webkit-fill-available\", \"justifyContent\": \"center\"}}>\n                    <CategoriesSelect selected={selected}\n                                      setSelected={setSelected}\n                                      label=\"REC-PL\"\n                                      incidences={tipusIncidencies}/>\n                </Box>\n                <Box display={\"flex\"} style={{\"width\": \"-webkit-fill-available\", \"justifyContent\": \"center\"}}>\n                    <Typography> Incidències: {incidencies.length} </Typography>\n                </Box>\n                <Box display={\"flex\"} style={{\"width\": \"-webkit-fill-available\", \"justifyContent\": \"center\"}}>\n                    <Mapa dades={incidencies}/>\n                </Box>\n                <Box display={\"flex\"} style={{\"width\": \"-webkit-fill-available\", \"justifyContent\": \"center\"}}>\n                    <Typography> REC-PL: Ruidos en Castelldefels Playa by xmorato@gmail.com </Typography>\n                </Box>\n\n            </Box>\n        </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}